train_samples = label_train.shape[0]
test_samples  = label_test.shape[0]

trainLow_samples  = np.sum(np.where(label_train < 6, 1, 0))
testLow_samples = np.sum(np.where(label_test <  6, 1, 0))

# separate in containers data that is lower nad higer than 6
data_low_train   = np.zeros([trainLow_samples,28,28])
label_low_train  = np.zeros(trainLow_samples)
data_high_train  = np.zeros([train_samples-trainLow_samples,28,28])
label_high_train = np.zeros(train_samples-trainLow_samples)

#data_low_test   = np.zeros([testLow_samples,28,28])
#label_low_test  = np.zeros(testLow_samples)
#data_high_test  = np.zeros([test_samples-testLow_samples,28,28])
#label_high_test = np.zeros(test_samples-testLow_samples)

data_low_test   = np.zeros([60,28,28])
label_low_test  = np.zeros(60)
data_high_test  = np.zeros([40,28,28])
label_high_test = np.zeros(40)

j,k = 0,0
for i in range(0,train_samples):  
    if(label_train[i] in low_set):
        data_low_train[j,:,:] = data_train[i,:,:]
        label_low_train[j]    = label_train[i]
        j+=1
    else:
        data_high_train[k,:,:] = data_train[i,:,:]
        label_high_train[k]    = label_train[i]
        k+=1

#j,k = 0,0
#for i in range(0,test_samples):  
#    if(label_test[i]<6):
#        data_low_test[j,:,:] = data_test[i,:,:]
#        label_low_test[j]    = label_test[i]
#        j+=1
#    else:
#        data_high_test[k,:,:] = data_test[i,:,:]
#        label_high_test[k]    = label_test[i]
#        k+=1

count_0 = 0
count_1 = 0
count_2 = 0
count_3 = 0
count_4 = 0
count_5 = 0
count_6 = 0
count_7 = 0
count_8 = 0
count_9 = 0

j,k = 0,0
n_elem_low = 10
n_elem_high = 10

for i in range(0,test_samples):
    if(label_test[i]==0 and count_0<n_elem_low):
        data_low_test[j,:,:] = data_test[i,:,:]
        label_low_test[j]    = label_test[i]
        count_0+=1
        j += 1
    if(label_test[i]==1 and count_1<n_elem_low):
        data_low_test[j,:,:] = data_test[i,:,:]
        label_low_test[j]    = label_test[i]
        count_1+=1
        j += 1
    if(label_test[i]==2 and count_2<n_elem_low):
        data_low_test[j,:,:] = data_test[i,:,:]
        label_low_test[j]    = label_test[i]
        count_2+=1
        j += 1
    if(label_test[i]==3 and count_3<n_elem_low):
        data_low_test[j,:,:] = data_test[i,:,:]
        label_low_test[j]    = label_test[i]
        count_3+=1
        j += 1
    if(label_test[i]==4 and count_4<n_elem_low):
        data_low_test[j,:,:] = data_test[i,:,:]
        label_low_test[j]    = label_test[i]
        count_4+=1
        j += 1
    if(label_test[i]==5 and count_5<n_elem_low):
        data_low_test[j,:,:] = data_test[i,:,:]
        label_low_test[j]    = label_test[i]
        count_5+=1
        j += 1
    if(label_test[i]==6 and count_6<n_elem_high):
        data_high_test[k,:,:] = data_test[i,:,:]
        label_high_test[k]    = label_test[i]
        count_6+=1
        k += 1
    if(label_test[i]==7 and count_7<n_elem_high):
        data_high_test[k,:,:] = data_test[i,:,:]
        label_high_test[k]    = label_test[i]
        count_7+=1
        k += 1
    if(label_test[i]==8 and count_8<n_elem_high):
        data_high_test[k,:,:] = data_test[i,:,:]
        label_high_test[k]    = label_test[i]
        count_8+=1
        k += 1
    if(label_test[i]==9 and count_9<n_elem_high):
        data_high_test[k,:,:] = data_test[i,:,:]
        label_high_test[k]    = label_test[i]
        count_9+=1
        k += 1

print('After the separation of the dataset in groups higer and lower/equal than 6 the datasets are:')
print(f'     Train dataset lower than 6 has shape:  {data_low_train.shape}')
print(f'     Train dataset higher than 6 has shape: {data_high_train.shape}')
print()
print(f'     Test dataset lower than 6 has shape:  {data_low_test.shape}')
print(f'     Test dataset higher than 6 has shape: {data_high_test.shape}')