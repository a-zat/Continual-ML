# PARTI RIMOSSE. INSERITE QUI PER NON COMMENTARE RIGA PER RIGA
def tmp():
#n_count = np.zeros((batch_size, n_cluster)).astype(int) #inizializzo un vettore che ci permette di contare per ogni cluster quali numeri sono stati inseriti
  # qui viene riempito il vettore conteggio. Se l'immagine che ci interessa classificare è stata inserita nel cluster 0, il ciclo guarderà 
  # tutte le labels delle immagini che sono state messe in quel cluster e la label che compare più volte sarà la pseudo_label della nostra immagine 
  for j in range(1, batch_size+1):  # For all images in the batch
    for i in range(0,len(k_mean.labels_) - batch_size): # ,,,,
        if k_mean.labels_[i] == k_mean.labels_[-j]:
         if labels_features[i] == 0:
           n_count[-j,0] +=1
         if labels_features[i] == 1:
           n_count[-j,1] +=1
         if labels_features[i] == 2:
           n_count[-j,2] +=1
         if labels_features[i] == 3:
           n_count[-j,3] +=1
         if labels_features[i] == 4:
           n_count[-j,4] +=1
         if labels_features[i] == 5:
           n_count[-j,5] +=1
         if labels_features[i] == 6:
           n_count[-j,6] +=1
         if labels_features[i] == 7:
           n_count[-j,7] +=1
         if labels_features[i] == 8:
           n_count[-j,8] +=1
         if labels_features[i] == 9:
           n_count[-j,9] +=1
  
  pseudo_label = np.zeros(batch_size)
  err = 0      

  # Extract the label for the new element
  for i in range(0,batch_size):
    pseudo_label[i]  =   np.argmax(n_count[i,:])  
    if pseudo_label[i]!= labels_features[i+int(n_cluster*len(labels_features_saved)/10)]:
      err += 1
  
  # CHECK

  #rint("The vector count is: ")
  #print(n_count)
  #print("\n")
    
  #print("The pseudo label is are: ")
  #print(pseudo_label)
  #print("\n")
  #print("The true label is are: ")
  #print(y_test)
  #print("\n")

  #print("The image has been clustered in the group:  ")
  #print(k_mean.labels_[-1])
  #print("\n")
  
  # Delete the last feature and the last label
  features = np.delete(features, len(features)-1, 0)

  # Print control table
  #print("KMeans applied on numbers: \n")
  #clusters, count = cluster_label_count(k_mean.labels_, labels_features.astype(int))
  #print(clusters)
  #print("\n")

  #elimino label che abbiamo concatenato
  #labels_features = np.delete(labels_features, len(labels_features)-1, 0)

  #return pseudo_label, err